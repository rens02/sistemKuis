// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "quiz/model"

	mock "github.com/stretchr/testify/mock"
)

// UsersInterface is an autogenerated mock type for the UsersInterface type
type UsersInterface struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: userId
func (_m *UsersInterface) DeleteUser(userId uint) int {
	ret := _m.Called(userId)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Login provides a mock function with given fields: email, password
func (_m *UsersInterface) Login(email string, password string) (*model.Users, int) {
	ret := _m.Called(email, password)

	var r0 *model.Users
	var r1 int
	if rf, ok := ret.Get(0).(func(string, string) (*model.Users, int)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Users); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) int); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// MyProfile provides a mock function with given fields: id
func (_m *UsersInterface) MyProfile(id uint) (*model.Users, int) {
	ret := _m.Called(id)

	var r0 *model.Users
	var r1 int
	if rf, ok := ret.Get(0).(func(uint) (*model.Users, int)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Users); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *UsersInterface) Register(newUser model.Users) (*model.Users, int) {
	ret := _m.Called(newUser)

	var r0 *model.Users
	var r1 int
	if rf, ok := ret.Get(0).(func(model.Users) (*model.Users, int)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(model.Users) *model.Users); ok {
		r0 = rf(newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Users) int); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// UpdateMyProfile provides a mock function with given fields: updateUser
func (_m *UsersInterface) UpdateMyProfile(updateUser model.Users) (*model.Users, int) {
	ret := _m.Called(updateUser)

	var r0 *model.Users
	var r1 int
	if rf, ok := ret.Get(0).(func(model.Users) (*model.Users, int)); ok {
		return rf(updateUser)
	}
	if rf, ok := ret.Get(0).(func(model.Users) *model.Users); ok {
		r0 = rf(updateUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Users) int); ok {
		r1 = rf(updateUser)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// NewUsersInterface creates a new instance of UsersInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersInterface {
	mock := &UsersInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
