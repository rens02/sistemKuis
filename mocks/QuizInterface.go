// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "quiz/model"

	mock "github.com/stretchr/testify/mock"
)

// QuizInterface is an autogenerated mock type for the QuizInterface type
type QuizInterface struct {
	mock.Mock
}

// DeleteQuiz provides a mock function with given fields: quizId, userId
func (_m *QuizInterface) DeleteQuiz(quizId uint, userId uint) int {
	ret := _m.Called(quizId, userId)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint, uint) int); ok {
		r0 = rf(quizId, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetAllMyQuiz provides a mock function with given fields: page, pageSize, search, userId
func (_m *QuizInterface) GetAllMyQuiz(page int, pageSize int, search string, userId uint) ([]model.Quiz, int64, int) {
	ret := _m.Called(page, pageSize, search, userId)

	var r0 []model.Quiz
	var r1 int64
	var r2 int
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]model.Quiz, int64, int)); ok {
		return rf(page, pageSize, search, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []model.Quiz); ok {
		r0 = rf(page, pageSize, search, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Quiz)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(page, pageSize, search, userId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) int); ok {
		r2 = rf(page, pageSize, search, userId)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetAllQuiz provides a mock function with given fields: page, pageSize, search
func (_m *QuizInterface) GetAllQuiz(page int, pageSize int, search string) ([]model.Quiz, int64, int) {
	ret := _m.Called(page, pageSize, search)

	var r0 []model.Quiz
	var r1 int64
	var r2 int
	if rf, ok := ret.Get(0).(func(int, int, string) ([]model.Quiz, int64, int)); ok {
		return rf(page, pageSize, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []model.Quiz); ok {
		r0 = rf(page, pageSize, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Quiz)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, pageSize, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) int); ok {
		r2 = rf(page, pageSize, search)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetQuizByID provides a mock function with given fields: id
func (_m *QuizInterface) GetQuizByID(id uint) (*model.Quiz, int) {
	ret := _m.Called(id)

	var r0 *model.Quiz
	var r1 int
	if rf, ok := ret.Get(0).(func(uint) (*model.Quiz, int)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Quiz); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Quiz)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// InsertQuiz provides a mock function with given fields: newQuiz
func (_m *QuizInterface) InsertQuiz(newQuiz model.Quiz) (*model.Quiz, int) {
	ret := _m.Called(newQuiz)

	var r0 *model.Quiz
	var r1 int
	if rf, ok := ret.Get(0).(func(model.Quiz) (*model.Quiz, int)); ok {
		return rf(newQuiz)
	}
	if rf, ok := ret.Get(0).(func(model.Quiz) *model.Quiz); ok {
		r0 = rf(newQuiz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Quiz)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Quiz) int); ok {
		r1 = rf(newQuiz)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// UpdateQuiz provides a mock function with given fields: updateQuiz, userId
func (_m *QuizInterface) UpdateQuiz(updateQuiz model.Quiz, userId uint) (*model.Quiz, int) {
	ret := _m.Called(updateQuiz, userId)

	var r0 *model.Quiz
	var r1 int
	if rf, ok := ret.Get(0).(func(model.Quiz, uint) (*model.Quiz, int)); ok {
		return rf(updateQuiz, userId)
	}
	if rf, ok := ret.Get(0).(func(model.Quiz, uint) *model.Quiz); ok {
		r0 = rf(updateQuiz, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Quiz)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Quiz, uint) int); ok {
		r1 = rf(updateQuiz, userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// NewQuizInterface creates a new instance of QuizInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuizInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuizInterface {
	mock := &QuizInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
