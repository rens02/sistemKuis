// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "quiz/model"

	mock "github.com/stretchr/testify/mock"
)

// QuestionsInterface is an autogenerated mock type for the QuestionsInterface type
type QuestionsInterface struct {
	mock.Mock
}

// DeleteQuestion provides a mock function with given fields: questionsId, userId
func (_m *QuestionsInterface) DeleteQuestion(questionsId uint, userId uint) int {
	ret := _m.Called(questionsId, userId)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint, uint) int); ok {
		r0 = rf(questionsId, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetAllQuestionsFromQuiz provides a mock function with given fields: page, pageSize, quizId
func (_m *QuestionsInterface) GetAllQuestionsFromQuiz(page int, pageSize int, quizId uint) ([]model.Questions, int64, int) {
	ret := _m.Called(page, pageSize, quizId)

	var r0 []model.Questions
	var r1 int64
	var r2 int
	if rf, ok := ret.Get(0).(func(int, int, uint) ([]model.Questions, int64, int)); ok {
		return rf(page, pageSize, quizId)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint) []model.Questions); ok {
		r0 = rf(page, pageSize, quizId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Questions)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint) int64); ok {
		r1 = rf(page, pageSize, quizId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, uint) int); ok {
		r2 = rf(page, pageSize, quizId)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetQuestionByID provides a mock function with given fields: id
func (_m *QuestionsInterface) GetQuestionByID(id uint) (*model.Questions, int) {
	ret := _m.Called(id)

	var r0 *model.Questions
	var r1 int
	if rf, ok := ret.Get(0).(func(uint) (*model.Questions, int)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Questions); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Questions)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// InsertGenerateQuestion provides a mock function with given fields: newQuestions
func (_m *QuestionsInterface) InsertGenerateQuestion(newQuestions []model.Questions) ([]model.Questions, int) {
	ret := _m.Called(newQuestions)

	var r0 []model.Questions
	var r1 int
	if rf, ok := ret.Get(0).(func([]model.Questions) ([]model.Questions, int)); ok {
		return rf(newQuestions)
	}
	if rf, ok := ret.Get(0).(func([]model.Questions) []model.Questions); ok {
		r0 = rf(newQuestions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Questions)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.Questions) int); ok {
		r1 = rf(newQuestions)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// InsertQuestion provides a mock function with given fields: newQuestion
func (_m *QuestionsInterface) InsertQuestion(newQuestion model.Questions) (*model.Questions, int) {
	ret := _m.Called(newQuestion)

	var r0 *model.Questions
	var r1 int
	if rf, ok := ret.Get(0).(func(model.Questions) (*model.Questions, int)); ok {
		return rf(newQuestion)
	}
	if rf, ok := ret.Get(0).(func(model.Questions) *model.Questions); ok {
		r0 = rf(newQuestion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Questions)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Questions) int); ok {
		r1 = rf(newQuestion)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// UpdateQuestion provides a mock function with given fields: updateQuestions, userId
func (_m *QuestionsInterface) UpdateQuestion(updateQuestions model.Questions, userId uint) (*model.Questions, int) {
	ret := _m.Called(updateQuestions, userId)

	var r0 *model.Questions
	var r1 int
	if rf, ok := ret.Get(0).(func(model.Questions, uint) (*model.Questions, int)); ok {
		return rf(updateQuestions, userId)
	}
	if rf, ok := ret.Get(0).(func(model.Questions, uint) *model.Questions); ok {
		r0 = rf(updateQuestions, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Questions)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Questions, uint) int); ok {
		r1 = rf(updateQuestions, userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// NewQuestionsInterface creates a new instance of QuestionsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuestionsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuestionsInterface {
	mock := &QuestionsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
