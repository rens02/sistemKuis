// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	drive "google.golang.org/api/drive/v3"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	model "quiz/model"
)

// ExportInterface is an autogenerated mock type for the ExportInterface type
type ExportInterface struct {
	mock.Mock
}

// CreateFile provides a mock function with given fields: service, name, mimeType, content, parentId
func (_m *ExportInterface) CreateFile(service *drive.Service, name string, mimeType string, content io.Reader, parentId string) (*drive.File, error) {
	ret := _m.Called(service, name, mimeType, content, parentId)

	var r0 *drive.File
	var r1 error
	if rf, ok := ret.Get(0).(func(*drive.Service, string, string, io.Reader, string) (*drive.File, error)); ok {
		return rf(service, name, mimeType, content, parentId)
	}
	if rf, ok := ret.Get(0).(func(*drive.Service, string, string, io.Reader, string) *drive.File); ok {
		r0 = rf(service, name, mimeType, content, parentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drive.File)
		}
	}

	if rf, ok := ret.Get(1).(func(*drive.Service, string, string, io.Reader, string) error); ok {
		r1 = rf(service, name, mimeType, content, parentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportHistoryAnswer provides a mock function with given fields: history, user_id
func (_m *ExportInterface) ExportHistoryAnswer(history []model.HistoryAnswersRes, user_id uint) (*model.ExportRes, error) {
	ret := _m.Called(history, user_id)

	var r0 *model.ExportRes
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.HistoryAnswersRes, uint) (*model.ExportRes, error)); ok {
		return rf(history, user_id)
	}
	if rf, ok := ret.Get(0).(func([]model.HistoryAnswersRes, uint) *model.ExportRes); ok {
		r0 = rf(history, user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExportRes)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.HistoryAnswersRes, uint) error); ok {
		r1 = rf(history, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportHistoryScoreMyQuiz provides a mock function with given fields: history, quiz_id
func (_m *ExportInterface) ExportHistoryScoreMyQuiz(history []model.HistoryScoreMyQuizRes, quiz_id uint) (*model.ExportRes, error) {
	ret := _m.Called(history, quiz_id)

	var r0 *model.ExportRes
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.HistoryScoreMyQuizRes, uint) (*model.ExportRes, error)); ok {
		return rf(history, quiz_id)
	}
	if rf, ok := ret.Get(0).(func([]model.HistoryScoreMyQuizRes, uint) *model.ExportRes); ok {
		r0 = rf(history, quiz_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExportRes)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.HistoryScoreMyQuizRes, uint) error); ok {
		r1 = rf(history, quiz_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportMyHistoryScore provides a mock function with given fields: history, userId
func (_m *ExportInterface) ExportMyHistoryScore(history []model.MyHistoryScoreRes, userId uint) (*model.ExportRes, error) {
	ret := _m.Called(history, userId)

	var r0 *model.ExportRes
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.MyHistoryScoreRes, uint) (*model.ExportRes, error)); ok {
		return rf(history, userId)
	}
	if rf, ok := ret.Get(0).(func([]model.MyHistoryScoreRes, uint) *model.ExportRes); ok {
		r0 = rf(history, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExportRes)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.MyHistoryScoreRes, uint) error); ok {
		r1 = rf(history, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDownloadLink provides a mock function with given fields: service, fileId
func (_m *ExportInterface) GetDownloadLink(service *drive.Service, fileId string) (string, error) {
	ret := _m.Called(service, fileId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*drive.Service, string) (string, error)); ok {
		return rf(service, fileId)
	}
	if rf, ok := ret.Get(0).(func(*drive.Service, string) string); ok {
		r0 = rf(service, fileId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*drive.Service, string) error); ok {
		r1 = rf(service, fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccount provides a mock function with given fields: email, key
func (_m *ExportInterface) ServiceAccount(email string, key string) *http.Client {
	ret := _m.Called(email, key)

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func(string, string) *http.Client); ok {
		r0 = rf(email, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// UploadFile provides a mock function with given fields: fileName
func (_m *ExportInterface) UploadFile(fileName string) (string, error) {
	ret := _m.Called(fileName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExportInterface creates a new instance of ExportInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExportInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExportInterface {
	mock := &ExportInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
