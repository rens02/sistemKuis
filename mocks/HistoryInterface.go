// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "quiz/model"

	mock "github.com/stretchr/testify/mock"
)

// HistoryInterface is an autogenerated mock type for the HistoryInterface type
type HistoryInterface struct {
	mock.Mock
}

// AnswersInsert provides a mock function with given fields: answers, user_id, quiz_id
func (_m *HistoryInterface) AnswersInsert(answers []model.Answers, user_id uint, quiz_id uint) (*model.HistoryScore, int) {
	ret := _m.Called(answers, user_id, quiz_id)

	var r0 *model.HistoryScore
	var r1 int
	if rf, ok := ret.Get(0).(func([]model.Answers, uint, uint) (*model.HistoryScore, int)); ok {
		return rf(answers, user_id, quiz_id)
	}
	if rf, ok := ret.Get(0).(func([]model.Answers, uint, uint) *model.HistoryScore); ok {
		r0 = rf(answers, user_id, quiz_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HistoryScore)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.Answers, uint, uint) int); ok {
		r1 = rf(answers, user_id, quiz_id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// ExHistoryAnswer provides a mock function with given fields: historyId, userId
func (_m *HistoryInterface) ExHistoryAnswer(historyId uint, userId uint) ([]model.HistoryAnswers, int) {
	ret := _m.Called(historyId, userId)

	var r0 []model.HistoryAnswers
	var r1 int
	if rf, ok := ret.Get(0).(func(uint, uint) ([]model.HistoryAnswers, int)); ok {
		return rf(historyId, userId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []model.HistoryAnswers); ok {
		r0 = rf(historyId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HistoryAnswers)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) int); ok {
		r1 = rf(historyId, userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// ExHistoryScoreMyQuiz provides a mock function with given fields: quizId, userId
func (_m *HistoryInterface) ExHistoryScoreMyQuiz(quizId uint, userId uint) ([]model.HistoryScore, int) {
	ret := _m.Called(quizId, userId)

	var r0 []model.HistoryScore
	var r1 int
	if rf, ok := ret.Get(0).(func(uint, uint) ([]model.HistoryScore, int)); ok {
		return rf(quizId, userId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []model.HistoryScore); ok {
		r0 = rf(quizId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HistoryScore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) int); ok {
		r1 = rf(quizId, userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// ExMyHistoryScore provides a mock function with given fields: userId
func (_m *HistoryInterface) ExMyHistoryScore(userId uint) ([]model.HistoryScore, int) {
	ret := _m.Called(userId)

	var r0 []model.HistoryScore
	var r1 int
	if rf, ok := ret.Get(0).(func(uint) ([]model.HistoryScore, int)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []model.HistoryScore); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HistoryScore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) int); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetAllHistoryAnswer provides a mock function with given fields: page, pageSize, historyId, userId
func (_m *HistoryInterface) GetAllHistoryAnswer(page int, pageSize int, historyId uint, userId uint) ([]model.HistoryAnswers, int64, int) {
	ret := _m.Called(page, pageSize, historyId, userId)

	var r0 []model.HistoryAnswers
	var r1 int64
	var r2 int
	if rf, ok := ret.Get(0).(func(int, int, uint, uint) ([]model.HistoryAnswers, int64, int)); ok {
		return rf(page, pageSize, historyId, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint, uint) []model.HistoryAnswers); ok {
		r0 = rf(page, pageSize, historyId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HistoryAnswers)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint, uint) int64); ok {
		r1 = rf(page, pageSize, historyId, userId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, uint, uint) int); ok {
		r2 = rf(page, pageSize, historyId, userId)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetAllHistoryScoreMyQuiz provides a mock function with given fields: page, pageSize, quizId, search, userId
func (_m *HistoryInterface) GetAllHistoryScoreMyQuiz(page int, pageSize int, quizId uint, search string, userId uint) ([]model.HistoryScore, int64, int) {
	ret := _m.Called(page, pageSize, quizId, search, userId)

	var r0 []model.HistoryScore
	var r1 int64
	var r2 int
	if rf, ok := ret.Get(0).(func(int, int, uint, string, uint) ([]model.HistoryScore, int64, int)); ok {
		return rf(page, pageSize, quizId, search, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint, string, uint) []model.HistoryScore); ok {
		r0 = rf(page, pageSize, quizId, search, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HistoryScore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint, string, uint) int64); ok {
		r1 = rf(page, pageSize, quizId, search, userId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, uint, string, uint) int); ok {
		r2 = rf(page, pageSize, quizId, search, userId)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetAllMyHistoryScore provides a mock function with given fields: page, pageSize, userId, search
func (_m *HistoryInterface) GetAllMyHistoryScore(page int, pageSize int, userId uint, search string) ([]model.HistoryScore, int64, int) {
	ret := _m.Called(page, pageSize, userId, search)

	var r0 []model.HistoryScore
	var r1 int64
	var r2 int
	if rf, ok := ret.Get(0).(func(int, int, uint, string) ([]model.HistoryScore, int64, int)); ok {
		return rf(page, pageSize, userId, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint, string) []model.HistoryScore); ok {
		r0 = rf(page, pageSize, userId, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HistoryScore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint, string) int64); ok {
		r1 = rf(page, pageSize, userId, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, uint, string) int); ok {
		r2 = rf(page, pageSize, userId, search)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetHistoryScoreById provides a mock function with given fields: historyId, userId
func (_m *HistoryInterface) GetHistoryScoreById(historyId uint, userId uint) (*model.HistoryScore, int) {
	ret := _m.Called(historyId, userId)

	var r0 *model.HistoryScore
	var r1 int
	if rf, ok := ret.Get(0).(func(uint, uint) (*model.HistoryScore, int)); ok {
		return rf(historyId, userId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *model.HistoryScore); ok {
		r0 = rf(historyId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HistoryScore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) int); ok {
		r1 = rf(historyId, userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// NewHistoryInterface creates a new instance of HistoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHistoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HistoryInterface {
	mock := &HistoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
